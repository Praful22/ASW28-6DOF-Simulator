classdef DefineAircraftGeometry
    properties
        componentMassesAndGeom
        TotalMass
        CenterofGravity
        RotationalInertiaMatrix
        hor_stab
        vert_stab
        right_wing
        left_wing
    end

    methods
        function obj = DefineAircraftGeometry()
            obj.componentMassesAndGeom = ...
                [90 0.1 0.96 0.01 -0.23 0.44 0; % RightWing+Servo (s4)
                90 0.1 0.96 0.01 -0.23 -0.44 0; % LeftWing+Servo (s5)
                13 0.075 0.35 0.002 -0.76 0 -0.16; % Hor. Stab. (s2)
                0 0.08 0.002 0.18 -0.76 0 -0.09; % Vert. Stab. (s3)
                72 0.065 0.035 0.015 -0.05 0 0.03; % Battery
                106 0.87 0.07 0.07 -0.4 0 0; % Fuselage
                27 0.05 0.03 0.005 -0.05 0 0.02; % Motor Controller
                10 0.04 0.02 0.005 -0.1 0 0.02; % Radio
                20 0.05 0.01 0.01 -0.014 0 0; % 2 Servos
                40 0.03 0.02 0.02 0.02 0 0.01; % Motor
                12 0 0.26 0.025 0.05 0 0.01]; % Propeller

            % Convert mass from grams to kilograms
            obj.componentMassesAndGeom(:,1) = ...
                obj.componentMassesAndGeom(:,1) / 1000;

            % Calculate total mass
            m = sum(obj.componentMassesAndGeom(:,1));
            obj.TotalMass = m;

            % Calculate center of gravity (CG) location
            x_cm = sum(obj.componentMassesAndGeom(:,1) .* obj.componentMassesAndGeom(:,5:7)) / m;
            obj.CenterofGravity = x_cm;

            % Calculate rotational inertia matrix
            componentInertias_x = (1/12) * obj.componentMassesAndGeom(:,1) .* ...
                (obj.componentMassesAndGeom(:,3).^2 + obj.componentMassesAndGeom(:,4).^2);
            componentInertias_y = (1/12) * obj.componentMassesAndGeom(:,1) .* ...
                (obj.componentMassesAndGeom(:,2).^2 + obj.componentMassesAndGeom(:,4).^2);
            componentInertias_z = (1/12) * obj.componentMassesAndGeom(:,1) .* ...
                (obj.componentMassesAndGeom(:,2).^2 + obj.componentMassesAndGeom(:,3).^2);

            J = zeros(3,3);
            J(1,1) = sum(componentInertias_x) + sum(obj.componentMassesAndGeom(:,1) .* ...
                ((obj.componentMassesAndGeom(:,6)-x_cm(2)).^2 + (obj.componentMassesAndGeom(:,7)-x_cm(3)).^2));
            
            J(2,2) = sum(componentInertias_y) + sum(obj.componentMassesAndGeom(:,1) .* ...
                ((obj.componentMassesAndGeom(:,7)-x_cm(3)).^2 + (obj.componentMassesAndGeom(:,5)-x_cm(1)).^2));

            J(3,3) = sum(componentInertias_z) + sum(obj.componentMassesAndGeom(:,1) .* ...
                ((obj.componentMassesAndGeom(:,5)-x_cm(1)).^2 + (obj.componentMassesAndGeom(:,6)-x_cm(2)).^2));

            J(1,2) = -sum(obj.componentMassesAndGeom(:,1) .* ...
                ((obj.componentMassesAndGeom(:,5)-x_cm(1)) .* (obj.componentMassesAndGeom(:,6)-x_cm(2))));

            J(1,3) = -sum(obj.componentMassesAndGeom(:,1) .* ...
                ((obj.componentMassesAndGeom(:,7)-x_cm(3)) .* (obj.componentMassesAndGeom(:,5)-x_cm(1))));
            
            J(2,3) = -sum(obj.componentMassesAndGeom(:,1) .* ...
                ((obj.componentMassesAndGeom(:,6)-x_cm(2)) .* (obj.componentMassesAndGeom(:,7)-x_cm(3))));

            % Account for negatives and copy symmetric elements to complete the matrix
            J(1,2) = -J(1,2);
            J(1,3) = -J(1,3);
            J(2,3) = -J(2,3);
            J(2,1) = J(1,2);
            J(3,1) = J(1,3);
            J(3,2) = J(2,3);

            obj.RotationalInertiaMatrix = J;

            obj.hor_stab = struct('position', [-0.76; 0; -0.16], ...
                  'chord', 0.075, ...
                  'span', 0.35, ...
                  'area', 0.075 * 0.35, ...
                  'aspect_ratio', 0.35 / 0.075, ...
                  'normal', [0; 0; -1], ...
                  'CL0', 0, ...
                  'e', 0.8, ...
                  'i', 0, ...
                  'CD0', 0.01, ...
                  'CDa', 1, ...
                  'a0', 0, ...
                  'CM0', 0, ...
                  'CMa', 0, ...
                  'aerodynamic_center', [-0.76 + 0.25 * 0.075; 0; -0.16]);
            
            obj.vert_stab = struct('position', [-0.76; 0; -0.09], ...
                   'chord', 0.08, ...
                   'span', 0.18, ...
                   'area', 0.08 * 0.18, ...
                   'aspect_ratio', 0.18 / 0.08, ...
                   'normal', [0; 1; 0], ...
                   'CL0', 0, ...
                   'e', 0.8, ...
                   'i', 0, ...
                   'CD0', 0.01, ...
                   'CDa', 1, ...
                   'a0', 0, ...
                   'CM0', 0, ...
                   'CMa', 0, ...
                   'aerodynamic_center', [-0.76 + 0.25 * 0.08; 0; -0.09]);

            obj.right_wing = struct('position', [-0.23; 0.44; 0], ...
                    'chord', 0.1, ...
                    'span', 0.96, ...
                    'area', 0.1 * 0.96, ...
                    'aspect_ratio', 0.96 / 0.1, ...
                    'normal', [0; 0; -1], ...
                    'CL0', 0.05, ...
                    'e', 0.9, ...
                    'i', 0.05, ...
                    'CD0', 0.01, ...
                    'CDa', 1, ...
                    'a0', 0.05, ...
                    'CM0', -0.05, ...
                    'CMa', 0, ...
                    'aerodynamic_center', [-0.23 + 0.25 * 0.1; 0.44; 0]);

            obj.left_wing = struct('position', [-0.23; -0.44; 0], ...
                   'chord', 0.1, ...
                   'span', 0.96, ...
                   'area', 0.1 * 0.96, ...
                   'aspect_ratio', 0.96 / 0.1, ...
                   'normal', [0; 0; -1], ...
                   'CL0', 0.05, ...
                   'e', 0.9, ...
                   'i', 0.05, ...
                   'CD0', 0.01, ...
                   'CDa', 1, ...
                   'a0', 0.05, ...
                   'CM0', -0.05, ...
                   'CMa', 0, ...
                   'aerodynamic_center', [-0.23 + 0.25 * 0.1; -0.44; 0]);
        end
    end
end

